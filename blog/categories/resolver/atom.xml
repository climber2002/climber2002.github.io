<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: resolver | AprilTouch]]></title>
  <link href="http://climber2002.github.io/blog/categories/resolver/atom.xml" rel="self"/>
  <link href="http://climber2002.github.io/"/>
  <updated>2015-06-14T22:54:50+09:30</updated>
  <id>http://climber2002.github.io/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Digging Rails: How Rails finds your templates Part 4]]></title>
    <link href="http://climber2002.github.io/blog/2015/04/06/digging-rails-how-rails-finds-your-templates-part-4/"/>
    <updated>2015-04-06T19:08:37+09:30</updated>
    <id>http://climber2002.github.io/blog/2015/04/06/digging-rails-how-rails-finds-your-templates-part-4</id>
    <content type="html"><![CDATA[<p>In this part we will continue our exploration of how Rails finds your templates. If you need a refresh, here is <a href="http://climber2002.github.io/blog/2015/02/21/how-rails-finds-your-templates-part-1/">Part1</a>, <a href="http://climber2002.github.io/blog/2015/02/22/digging-rails-how-rails-finds-your-templates-part-2/">Part 2</a> and <a href="http://climber2002.github.io/blog/2015/03/22/digging-rails-how-rails-finds-your-templates-part-3/">Part 3</a>.</p>

<p>In <a href="http://climber2002.github.io/blog/2015/03/22/digging-rails-how-rails-finds-your-templates-part-3/">last part</a> we saw that <strong>ActionView::LookupContext#find_template</strong> is just a delegation to <strong>ActionView::PathSet#find</strong>. So let&rsquo;s check what <strong>ActionView::PathSet#find</strong> is doing.</p>

<h2>ActionView::PathSet</h2>

<p>From the class name of <strong>PathSet</strong> we can get an idea that this class is to manage a set of pathes, where the templates are stored. Let&rsquo;s have a look at the definition of this class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/path_set.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView #:nodoc:</span>
</span><span class='line'><span class="sr">  # = Action View PathSet</span>
</span><span class='line'><span class="sr">  #</span>
</span><span class='line'><span class="sr">  # This class is used to store and access paths in Action View. A number of</span>
</span><span class='line'><span class="sr">  # operations are defined so that you can search among the paths in this</span>
</span><span class='line'><span class="sr">  # set and also perform operations on other +PathSet+ objects.</span>
</span><span class='line'><span class="sr">  #</span>
</span><span class='line'><span class="sr">  # A +LookupContext+ will use a +PathSet+ to store the paths in its context.</span>
</span><span class='line'><span class="sr">  class PathSet #:nodoc:&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>
</span><span class='line'><span class="kp">attr_reader</span> <span class="ss">:paths</span>
</span><span class='line'>
</span><span class='line'><span class="n">delegate</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:include?</span><span class="p">,</span> <span class="ss">:pop</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:each</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:paths</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">paths</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@paths</span> <span class="o">=</span> <span class="n">typecast</span> <span class="n">paths</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find_all</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="k">raise</span><span class="p">(</span><span class="no">MissingTemplate</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_all</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">prefixes</span> <span class="o">=</span> <span class="o">[]</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prefixes</span> <span class="o">=</span> <span class="o">[</span><span class="n">prefixes</span><span class="o">]</span> <span class="k">if</span> <span class="nb">String</span> <span class="o">===</span> <span class="n">prefixes</span>
</span><span class='line'>  <span class="n">prefixes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="o">|</span>
</span><span class='line'>    <span class="n">paths</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">resolver</span><span class="o">|</span>
</span><span class='line'>      <span class="n">templates</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">templates</span> <span class="k">unless</span> <span class="n">templates</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">exists?</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">prefixes</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find_all</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">prefixes</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">typecast</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">path</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">Pathname</span><span class="p">,</span> <span class="nb">String</span>
</span><span class='line'>      <span class="no">OptimizedFileSystemResolver</span><span class="o">.</span><span class="n">new</span> <span class="n">path</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">path</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>We can see that the <strong>initialize</strong> method accepts a <em>paths</em> param, which is normally an array of strings. And in <strong>initialize</strong> method, it will call the typecast the <em>paths</em> and then store the typecasted value in <em>@paths</em> instance variable</li>
<li>for each element in the <em>paths</em>, the <strong>typecast</strong> method will convert it to an <strong>OptimizedFileSystemResolver</strong> instance.</li>
<li>The <strong>find_all</strong> method will interate each resolver instance in <em>paths</em> and return the first value which is not empty</li>
<li>The <strong>find</strong> method just delegates to <strong>find_all</strong> method, if it can&rsquo;t find a template, it will raise <em>MissingTemplate</em> exception.</li>
</ul>


<p>In <strong>LookupContext</strong> class, we can see how the <strong>ActionView::PathSet</strong> instance is created.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/lookup_context.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView</span>
</span><span class='line'><span class="sr">  class LookupContext&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Helpers related to template lookup using the lookup context information.</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ViewPaths</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:view_paths</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Whenever setting view paths, makes a copy so that we can manipulate them in</span>
</span><span class='line'>  <span class="c1"># instance objects as we wish.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">view_paths</span><span class="o">=</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@view_paths</span> <span class="o">=</span> <span class="ss">ActionView</span><span class="p">:</span><span class="ss">:PathSet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="n">paths</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">ViewPaths</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>view_paths=</strong> method is defind in module <strong>ActionView::LookupContext::ViewPaths</strong> and <strong>ActionView::LookupContext</strong> includes this module. We can see that the when calling <strong>view_paths=</strong> method, an instance of <strong>ActionView::PathSet</strong> will be created and set to the <strong>@view_paths</strong> instance variable of <strong>ActionView::LookupContext</strong>.</p>

<p>So how this <strong>view_paths=</strong> method is called? It&rsquo;s in <strong>ActionView::LookupContext#initialize</strong> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/lookup_context.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView</span>
</span><span class='line'><span class="sr">  class LookupContext&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">view_paths</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">prefixes</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@details</span><span class="p">,</span> <span class="vi">@details_key</span> <span class="o">=</span> <span class="p">{},</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="vi">@skip_default_locale</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@cache</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@prefixes</span> <span class="o">=</span> <span class="n">prefixes</span>
</span><span class='line'>  <span class="vi">@rendered_format</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">view_paths</span> <span class="o">=</span> <span class="n">view_paths</span>
</span><span class='line'>  <span class="n">initialize_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So the <strong>view_paths</strong> is passed to <strong>ActionView::LookupContext</strong> instances in <strong>initialize</strong>. And in <strong>ActionView::ViewPaths</strong> it initializes <strong>ActionView::LookupContext</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/view_paths.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView</span>
</span><span class='line'><span class="sr">  module ViewPaths&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'><span class="n">included</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">class_attribute</span> <span class="ss">:_view_paths</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">_view_paths</span> <span class="o">=</span> <span class="ss">ActionView</span><span class="p">:</span><span class="ss">:PathSet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">_view_paths</span><span class="o">.</span><span class="n">freeze</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># LookupContext is the object responsible to hold all information required to lookup</span>
</span><span class='line'><span class="c1"># templates, i.e. view paths and details. Check ActionView::LookupContext for more</span>
</span><span class='line'><span class="c1"># information.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">lookup_context</span>
</span><span class='line'>  <span class="vi">@_lookup_context</span> <span class="o">||=</span>
</span><span class='line'>    <span class="ss">ActionView</span><span class="p">:</span><span class="ss">:LookupContext</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">_view_paths</span><span class="p">,</span> <span class="n">details_for_lookup</span><span class="p">,</span> <span class="n">_prefixes</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">append_view_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lookup_context</span><span class="o">.</span><span class="n">view_paths</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">prepend_view_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lookup_context</span><span class="o">.</span><span class="n">view_paths</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>  <span class="c1"># Append a path to the list of view paths for this controller.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># ==== Parameters</span>
</span><span class='line'>  <span class="c1"># * &amp;lt;tt&amp;gt;path&amp;lt;/tt&amp;gt; - If a String is provided, it gets converted into</span>
</span><span class='line'>  <span class="c1">#   the default view path. You may also provide a custom view path</span>
</span><span class='line'>  <span class="c1">#   (see ActionView::PathSet for more information)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">append_view_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">_view_paths</span> <span class="o">=</span> <span class="n">view_paths</span> <span class="o">+</span> <span class="nb">Array</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Prepend a path to the list of view paths for this controller.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># ==== Parameters</span>
</span><span class='line'>  <span class="c1"># * &amp;lt;tt&amp;gt;path&amp;lt;/tt&amp;gt; - If a String is provided, it gets converted into</span>
</span><span class='line'>  <span class="c1">#   the default view path. You may also provide a custom view path</span>
</span><span class='line'>  <span class="c1">#   (see ActionView::PathSet for more information)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepend_view_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">_view_paths</span> <span class="o">=</span> <span class="ss">ActionView</span><span class="p">:</span><span class="ss">:PathSet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">+</span> <span class="n">view_paths</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># A list of all of the default view paths for this controller.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">view_paths</span>
</span><span class='line'>    <span class="n">_view_paths</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This <strong>ActionView::ViewPaths</strong> will be included in a controller class. We can see that by default the <em>view_paths</em> is an empty array. But it provides <em>append_view_path</em> and <em>prepend_view_path</em> to add a view path at the end or the front of view paths. Notice that the <strong>prepend_view_path</strong> and <strong>append_view_path</strong> are defined both as class methods and instance methods.</p>

<p>So how the view path is initialized? Actually it&rsquo;s in <strong>Rails::Engine</strong> class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/railties/lib/rails/engine.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module Rails&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Engine</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;initializer :add_view_paths do</span>
</span><span class='line'><span class="sr">  views = paths[&quot;app/</span><span class="n">views</span><span class="s2">&quot;].existent</span>
</span><span class='line'><span class="s2">  unless views.empty?</span>
</span><span class='line'><span class="s2">    ActiveSupport.on_load(:action_controller){ prepend_view_path(views) if respond_to?(:prepend_view_path) }</span>
</span><span class='line'><span class="s2">    ActiveSupport.on_load(:action_mailer){ prepend_view_path(views) }</span>
</span><span class='line'><span class="s2">  end</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>a initializer defines a code block which will be called during application startup. So when load :action_controller it will call <strong>prepend_view_path</strong> and the view_paths contains only one element, which is the <strong>app/views</strong> folder in your rails application.</p>

<h1>OptimizedFileSystemResolver</h1>

<p><img class="left" src="/images/resolver.png" width="300" height="500"></p>

<p>Now understand how <strong>ActionView::PathSet</strong> is initialized, and we also know that in <em>find</em> method it actually delegates to the resolver. So let&rsquo;s see how the resolver implements the method.</p>

<p>The Resolver is to resolve a template when passing the details. The class relationship is as the above diagram,</p>

<p>We can see that by default the resolver used in <strong>ActionView::PathSet</strong>, which is <strong>ActionView::OptimizedFileSystemResolver</strong>, extends from <strong>ActionView::FileSystemResolver</strong>, which in terms extends from <strong>ActionView::PathResolver</strong>, which extends from <strong>ActionView::Resolver</strong>, which is the base class for all resolvers.</p>

<p>The base class <strong>ActionView::Resolver</strong> provides some common functionalities such as caching for all sub-class resolvers. However here I will focus on <strong>ActionView::PathResolver</strong>, which implements the logic how to find a template in a path.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/template/resolver.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">PathResolver</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Resolver</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;EXTENSIONS = { :locale =&amp;gt; &quot;.&quot;, :formats =&amp;gt; &quot;.&quot;, :variants =&amp;gt; &quot;+&quot;, :handlers =&amp;gt; &quot;.&quot; }</span>
</span><span class='line'><span class="sr">DEFAULT_PATTERN = &quot;:prefix/</span><span class="ss">:action</span><span class="p">{</span><span class="o">.</span><span class="ss">:locale</span><span class="p">,}{</span><span class="o">.</span><span class="ss">:formats</span><span class="p">,}{</span><span class="o">+</span><span class="ss">:variants</span><span class="p">,}{</span><span class="o">.</span><span class="ss">:handlers</span><span class="p">,}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">def initialize(pattern=nil)</span>
</span><span class='line'><span class="s2">  @pattern = pattern || DEFAULT_PATTERN</span>
</span><span class='line'><span class="s2">  super()</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">private</span>
</span><span class='line'>
</span><span class='line'><span class="s2">def find_templates(name, prefix, partial, details)</span>
</span><span class='line'><span class="s2">  path = Path.build(name, prefix, partial)</span>
</span><span class='line'><span class="s2">  query(path, details, details[:formats])</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">def query(path, details, formats)</span>
</span><span class='line'><span class="s2">  query = build_query(path, details)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  template_paths = find_template_paths query</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  template_paths.map { |template|</span>
</span><span class='line'><span class="s2">    handler, format, variant = extract_handler_and_format_and_variant(template, formats)</span>
</span><span class='line'><span class="s2">    contents = File.binread(template)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    Template.new(contents, File.expand_path(template), handler,</span>
</span><span class='line'><span class="s2">      :virtual_path =&amp;gt; path.virtual,</span>
</span><span class='line'><span class="s2">      :format       =&amp;gt; format,</span>
</span><span class='line'><span class="s2">      :variant      =&amp;gt; variant,</span>
</span><span class='line'><span class="s2">      :updated_at   =&amp;gt; mtime(template)</span>
</span><span class='line'><span class="s2">    )</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">def find_template_paths(query)</span>
</span><span class='line'><span class="s2">  Dir[query].reject { |filename|</span>
</span><span class='line'><span class="s2">    File.directory?(filename) ||</span>
</span><span class='line'><span class="s2">      # deals with case-insensitive file systems.</span>
</span><span class='line'><span class="s2">      !File.fnmatch(query, filename, File::FNM_EXTGLOB)</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2"># Helper for building query glob string based on resolver&#39;s pattern.</span>
</span><span class='line'><span class="s2">def build_query(path, details)</span>
</span><span class='line'><span class="s2">  query = @pattern.dup</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  prefix = path.prefix.empty? ? &quot;&quot; : &quot;</span><span class="c1">#{escape_entry(path.prefix)}\\1&quot;</span>
</span><span class='line'>  <span class="n">query</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\:prefix(\/)?/</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">partial</span> <span class="o">=</span> <span class="n">escape_entry</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">partial?</span> <span class="p">?</span> <span class="s2">&quot;_</span><span class="si">#{</span><span class="n">path</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="n">path</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">query</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\:action/</span><span class="p">,</span> <span class="n">partial</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">details</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">ext</span><span class="p">,</span> <span class="n">variants</span><span class="o">|</span>
</span><span class='line'>    <span class="n">query</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/\:</span><span class="si">#{</span><span class="n">ext</span><span class="si">}</span><span class="sr">/</span><span class="p">,</span> <span class="s2">&quot;{</span><span class="si">#{</span><span class="n">variants</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">}&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="vi">@path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">escape_entry</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span><span class='line'>  <span class="n">entry</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[*?{}\[\]]/</span><span class="p">,</span> <span class="s1">&#39;\\\\\\&amp;amp;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The most important methods are <strong>build_query</strong> and <strong>find_template_paths</strong>.</p>

<ul>
<li>The <strong>PathResolver</strong> will use a pattern to search templates in path, and by default the pattern is DEFAULT_PATTERN</li>
<li><strong>build_query</strong>: This method is to build a query from the path and details. Remember in <a href="http://climber2002.github.io/blog/2015/03/22/digging-rails-how-rails-finds-your-templates-part-3/">last part</a>, <strong>ActionView::AbstractRenderer#extract_details</strong> will extract details from options. For example, for an index action in Articles controller, the query will be</li>
</ul>


<p><strong>articles/index{.en,}{.html,}{+:variants,}{.haml,}</strong></p>

<p>For this query, in <strong>find_template_paths</strong> it will call <strong>Dir[query]</strong>, which is actually an alias to glob which is to expand the query. For example, for the above query, {p, q} matchs either p, or q. So for example for <em>{.en,}</em> it could either match .en or an empty string. So if we define a template <strong>articles/index.html.haml</strong>, it will match the query. For more information, consult <a href="http://ruby-doc.org/core-2.2.0/Dir.html#method-c-glob">Ruby doc</a>.</p>

<p>So for each matched template, in <strong>query</strong> method it will create a <strong>Template</strong> to wrap the template file.</p>

<h2>Summary</h2>

<p>So in summary here we can see that the flow for Rails to find a template is as following,</p>

<ol>
<li>Rails initializes a set of Paths for resolve templates, by default it contains only one path <em>app/views</em></li>
<li>When an action of a controller is accessed, the render will be called either explicitly or implicitly.</li>
<li>Rails will extract the prefixes, action and some details from the options passed to <em>render</em>,</li>
<li>Rails find the template by search in the path set using a query composed from prefixes, action and details.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging Rails: How Rails finds your templates Part 3]]></title>
    <link href="http://climber2002.github.io/blog/2015/03/22/digging-rails-how-rails-finds-your-templates-part-3/"/>
    <updated>2015-03-22T19:37:18+10:30</updated>
    <id>http://climber2002.github.io/blog/2015/03/22/digging-rails-how-rails-finds-your-templates-part-3</id>
    <content type="html"><![CDATA[<p>Long time no see! In <a href="http://climber2002.github.io/blog/2015/02/22/digging-rails-how-rails-finds-your-templates-part-2/">last part</a> we have shown that the template is rendered through <strong>ActionView::Renderer#render</strong> method, so in this part we will check this class in detail.</p>

<p>Now let&rsquo;s check this class,</p>

<h2>ActionView::Renderer</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/renderer/renderer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># This is the main entry point for rendering. It basically delegates</span>
</span><span class='line'>  <span class="c1"># to other objects like TemplateRenderer and PartialRenderer which</span>
</span><span class='line'>  <span class="c1"># actually renders the template.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># The Renderer will parse the options from the +render+ or +render_body+</span>
</span><span class='line'>  <span class="c1"># method and render a partial or a template based on the options. The</span>
</span><span class='line'>  <span class="c1"># +TemplateRenderer+ and +PartialRenderer+ objects are wrappers which do all</span>
</span><span class='line'>  <span class="c1"># the setup and logic necessary to render a view and a new object is created</span>
</span><span class='line'>  <span class="c1"># each time +render+ is called.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Renderer</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;attr_accessor :lookup_context</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize(lookup_context)</span>
</span><span class='line'><span class="sr">  @lookup_context = lookup_context</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Main render entry point shared by AV and AC.</span>
</span><span class='line'><span class="sr">def render(context, options)</span>
</span><span class='line'><span class="sr">  if options.key?(:partial)</span>
</span><span class='line'><span class="sr">    render_partial(context, options)</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    render_template(context, options)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Direct accessor to template rendering.</span>
</span><span class='line'><span class="sr">def render_template(context, options) #:nodoc:</span>
</span><span class='line'><span class="sr">  TemplateRenderer.new(@lookup_context).render(context, options)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This class is initialized with a lookup_context, which is of class <strong>ActionView::LookupContext</strong>. And when the <strong>render</strong> method is called, for a normal template, the <em>options</em> has no <em>:partial</em> key, so <strong>render_template</strong> is called. We can see that the <strong>render_template</strong> method is actually creates an instance of <strong>TemplateRenderer</strong> and calls its <strong>render</strong> method.</p>

<p>So let&rsquo;s have a look at this <strong>TemplateRenderer</strong> class,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/renderer/template_renderer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">TemplateRenderer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">AbstractRenderer</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def render(context, options)</span>
</span><span class='line'><span class="sr">  @view    = context</span>
</span><span class='line'><span class="sr">  @details = extract_details(options)</span>
</span><span class='line'><span class="sr">  template = determine_template(options)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  prepend_formats(template.formats)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  @lookup_context.rendered_format ||= (template.formats.first || formats.first)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  render_template(template, options[:layout], options[:locals])</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Determine the template to be rendered using the given options.</span>
</span><span class='line'><span class="sr">def determine_template(options)</span>
</span><span class='line'><span class="sr">  keys = options.has_key?(:locals) ? options[:locals].keys : []</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  if options.key?(:body)</span>
</span><span class='line'><span class="sr">    Template::Text.new(options[:body])</span>
</span><span class='line'><span class="sr">  elsif options.key?(:text)</span>
</span><span class='line'><span class="sr">    Template::Text.new(options[:text], formats.first)</span>
</span><span class='line'><span class="sr">  elsif options.key?(:plain)</span>
</span><span class='line'><span class="sr">    Template::Text.new(options[:plain])</span>
</span><span class='line'><span class="sr">  elsif options.key?(:html)</span>
</span><span class='line'><span class="sr">    Template::HTML.new(options[:html], formats.first)</span>
</span><span class='line'><span class="sr">  elsif options.key?(:file)</span>
</span><span class='line'><span class="sr">    with_fallbacks { find_template(options[:file], nil, false, keys, @details) }</span>
</span><span class='line'><span class="sr">  elsif options.key?(:inline)</span>
</span><span class='line'><span class="sr">    handler = Template.handler_for_extension(options[:type] || &quot;erb&quot;)</span>
</span><span class='line'><span class="sr">    Template.new(options[:inline], &quot;inline template&quot;, handler, :locals =&amp;gt; keys)</span>
</span><span class='line'><span class="sr">  elsif options.key?(:template)</span>
</span><span class='line'><span class="sr">    if options[:template].respond_to?(:render)</span>
</span><span class='line'><span class="sr">      options[:template]</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">      find_template(options[:template], options[:prefixes], false, keys, @details)</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    raise ArgumentError, &quot;You invoked render but did not give any of :partial, :template, :inline, :file, :plain, :text or :body option.&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This class extends from <strong>ActionView::AbstractRenderer</strong>, and the template is determined by the <strong>determinate_template</strong> method, we can see that this method checks some keys in <em>options</em> hash, for example <em>:body</em>, <em>:text</em>, etc. And last one it checks the <strong>:template</strong> key. From <a href="http://climber2002.github.io/blog/2015/02/21/how-rails-finds-your-templates-part-1/">Part 1</a> we already knew that if the <strong>:template</strong> key is not set explicitly, the <strong>options[:template]</strong> will be the action name. And <strong>options[:prefixes]</strong> is an array. For example, when the <em>index</em> action of <em>ArticlesController</em> is accessed, the <em>:template</em> and <em>:prefixes</em> will be,</p>

<ul>
<li><strong>:prefixes</strong> : array [“articles”, “application”]</li>
<li><strong>:template</strong> : string “index”</li>
</ul>


<p>So the template is found by calling <strong>find_template</strong> method, and this method is defined in super class <strong>ActionView::AbstractRenderer</strong>, and let&rsquo;s have a look at this class.</p>

<h2>ActionView::AbstractRenderer</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/renderer/abstract_renderer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">AbstractRenderer</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;delegate :find_template, :template_exists?, :with_fallbacks, :with_layout_format, :formats, :to =&amp;gt; :@lookup_context</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize(lookup_context)</span>
</span><span class='line'><span class="sr">  @lookup_context = lookup_context</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def render</span>
</span><span class='line'><span class="sr">  raise NotImplementedError</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">protected</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def extract_details(options)</span>
</span><span class='line'><span class="sr">  @lookup_context.registered_details.each_with_object({}) do |key, details|</span>
</span><span class='line'><span class="sr">    value = options[key]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    details[key] = Array(value) if value</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that the <strong>find_template</strong> method actually is delegated to <strong>lookup_context</strong>, we will check this method later, but remember that when <strong>find_template</strong> method is called, it is passed a <em>details</em> object, which is returned by the <strong>extract_details</strong> method.</p>

<p>Check the <strong>extract_details</strong> method above, we can see that this method returns a hash. It get the <em>registered_details</em> from the <em>lookup_context</em> and then check if the options contains the key, if yes, the result hush will be the options value for that key(tranformed to an array).</p>

<p>So what&rsquo;s in this <strong>ActionView::LookupContext#registered_details</strong>? Let&rsquo;s check that.</p>

<h2>ActionView::LookupContext#registered_details</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/lookup_context.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># LookupContext is the object responsible to hold all information required to lookup</span>
</span><span class='line'>  <span class="c1"># templates, i.e. view paths and details. The LookupContext is also responsible to</span>
</span><span class='line'>  <span class="c1"># generate a key, given to view paths, used in the resolver cache lookup. Since</span>
</span><span class='line'>  <span class="c1"># this key is generated just once during the request, it speeds up all cache accesses.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LookupContext</span> <span class="c1">#:nodoc:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">mattr_accessor</span> <span class="ss">:registered_details</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">registered_details</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">register_detail</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">registered_details</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">name</span>
</span><span class='line'>  <span class="kp">initialize</span> <span class="o">=</span> <span class="n">registered_details</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;@details[:</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">] = details[:</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">] || default_</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Accessors</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:&quot;default_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="ss">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span>
</span><span class='line'>  <span class="no">Accessors</span><span class="o">.</span><span class="n">module_eval</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span><span class="no">METHOD</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">def</span> <span class="c1">#{name}</span>
</span><span class='line'>      <span class="vi">@details</span><span class="o">.</span><span class="n">fetch</span><span class="p">(:</span><span class="c1">#{name}, [])</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="c1">#{name}=(value)</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">present?</span> <span class="p">?</span> <span class="nb">Array</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">:</span> <span class="n">default_</span><span class="c1">#{name}</span>
</span><span class='line'>      <span class="n">_set_detail</span><span class="p">(:</span><span class="c1">#{name}, value) if value != @details[:#{name}]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">remove_possible_method</span> <span class="ss">:initialize_details</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#{initialize.join(&quot;\n&quot;)}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="no">METHOD</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Holds accessors for the registered details.</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Accessors</span> <span class="c1">#:nodoc:</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">register_detail</span><span class="p">(</span><span class="ss">:locale</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">locales</span> <span class="o">=</span> <span class="o">[</span><span class="no">I18n</span><span class="o">.</span><span class="n">locale</span><span class="o">]</span>
</span><span class='line'>  <span class="n">locales</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="no">I18n</span><span class="o">.</span><span class="n">fallbacks</span><span class="o">[</span><span class="no">I18n</span><span class="o">.</span><span class="n">locale</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="no">I18n</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:fallbacks</span>
</span><span class='line'>  <span class="n">locales</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">I18n</span><span class="o">.</span><span class="n">default_locale</span>
</span><span class='line'>  <span class="n">locales</span><span class="o">.</span><span class="n">uniq!</span>
</span><span class='line'>  <span class="n">locales</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">register_detail</span><span class="p">(</span><span class="ss">:formats</span><span class="p">)</span> <span class="p">{</span> <span class="ss">ActionView</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">default_formats</span> <span class="o">||</span> <span class="o">[</span><span class="ss">:html</span><span class="p">,</span> <span class="ss">:text</span><span class="p">,</span> <span class="ss">:js</span><span class="p">,</span> <span class="ss">:css</span><span class="p">,</span>  <span class="ss">:xml</span><span class="p">,</span> <span class="ss">:json</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="n">register_detail</span><span class="p">(</span><span class="ss">:variants</span><span class="p">)</span> <span class="p">{</span> <span class="o">[]</span> <span class="p">}</span>
</span><span class='line'><span class="n">register_detail</span><span class="p">(</span><span class="ss">:handlers</span><span class="p">){</span> <span class="ss">Template</span><span class="p">:</span><span class="ss">:Handlers</span><span class="o">.</span><span class="n">extensions</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that it has a module attribute <strong>registered_details</strong>, which is an array, whose elements is the detail name.</p>

<p>For example, in a rails console we can call <strong>ActionView::LookupContext.registered_details</strong> to see the default detail keys.</p>

<p><img class="left" src="/images/details.png"></p>

<p>We can see that by default it registered 4 details: :locale, :formats, :variants and :handlers, just as in above code, the <strong>register_detail</strong> is called 4 times and passed those details keys one by one.</p>

<p>And also the class maintains an instance variable called <strong>@details</strong> which is a hash. The key of this hash is the detail key, the value normally is an array which is the detail value initialized from <strong>initialize_details</strong>. (We will talk about <strong>initialize_details</strong> later)</p>

<p>Each time the <strong>register_detail</strong> is called, it will add several instance methods to the class. For example, when passed <em>:locale</em> to the method, it will define following methods,</p>

<ul>
<li><strong>default_locale</strong> : returns the default locale which is the result returned from the passed block.</li>
<li><strong>locale</strong>: which returns the locale value stored in instance variable <strong>@details</strong></li>
<li><strong>locale=</strong>: which sets the locale value to <strong>@details</strong>.</li>
</ul>


<p>And also each time the registered_detail is called, the <strong>initialize_details</strong> will be redefined. For example, when firstly calling <strong>register_detail(:locale)</strong>, the <strong>initialize_details</strong> will be like following,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">LookupContext</span> <span class="c1">#:nodoc:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@details</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_locale</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then when <strong>register_detail(:formats)</strong> is called, the <strong>initialize_details</strong> will be redefined like following,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">LookupContext</span> <span class="c1">#:nodoc:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@details</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_locale</span>
</span><span class='line'>  <span class="vi">@details</span><span class="o">[</span><span class="ss">:formats</span><span class="o">]</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:formats</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_formats</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So the <strong>initialize_details</strong> is just to get the details values from <em>details</em> for each registered detail key, if the key is not found, it will set the default detail values.</p>

<h2>ActionView::LookupContext#find_template</h2>

<p>Now let&rsquo;s check the <strong>ActionView::LookupContext#find_template</strong> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/lookup_context.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">LookupContext</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include ViewPaths</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Helpers related to template lookup using the lookup context information.</span>
</span><span class='line'><span class="sr">module ViewPaths</span>
</span><span class='line'><span class="sr">  attr_reader :view_paths, :html_fallback_for_js</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  # Whenever setting view paths, makes a copy so that we can manipulate them in</span>
</span><span class='line'><span class="sr">  # instance objects as we wish.</span>
</span><span class='line'><span class="sr">  def view_paths=(paths)</span>
</span><span class='line'><span class="sr">    @view_paths = ActionView::PathSet.new(Array(paths))</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def find(name, prefixes = [], partial = false, keys = [], options = {})</span>
</span><span class='line'><span class="sr">    @view_paths.find(*args_for_lookup(name, prefixes, partial, keys, options))</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  alias :find_template :find</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def find_all(name, prefixes = [], partial = false, keys = [], options = {})</span>
</span><span class='line'><span class="sr">    @view_paths.find_all(*args_for_lookup(name, prefixes, partial, keys, options))</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def exists?(name, prefixes = [], partial = false, keys = [], options = {})</span>
</span><span class='line'><span class="sr">    @view_paths.exists?(*args_for_lookup(name, prefixes, partial, keys, options))</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  alias :template_exists? :exists?</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  # Adds fallbacks to the view paths. Useful in cases when you are rendering</span>
</span><span class='line'><span class="sr">  # a :file.</span>
</span><span class='line'><span class="sr">  def with_fallbacks</span>
</span><span class='line'><span class="sr">    added_resolvers = 0</span>
</span><span class='line'><span class="sr">    self.class.fallbacks.each do |resolver|</span>
</span><span class='line'><span class="sr">      next if view_paths.include?(resolver)</span>
</span><span class='line'><span class="sr">      view_paths.push(resolver)</span>
</span><span class='line'><span class="sr">      added_resolvers += 1</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">    yield</span>
</span><span class='line'><span class="sr">  ensure</span>
</span><span class='line'><span class="sr">    added_resolvers.times { view_paths.pop }</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">protected</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def args_for_lookup(name, prefixes, partial, keys, details_options) #:nodoc:</span>
</span><span class='line'><span class="sr">    name, prefixes = normalize_name(name, prefixes)</span>
</span><span class='line'><span class="sr">    details, details_key = detail_args_for(details_options)</span>
</span><span class='line'><span class="sr">    [name, prefixes, partial || false, details, details_key, keys]</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  # Compute details hash and key according to user options (e.g. passed from #render).</span>
</span><span class='line'><span class="sr">  def detail_args_for(options)</span>
</span><span class='line'><span class="sr">    return @details, details_key if options.empty? # most common path.</span>
</span><span class='line'><span class="sr">    user_details = @details.merge(options)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    if @cache</span>
</span><span class='line'><span class="sr">      details_key = DetailsKey.get(user_details)</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">      details_key = nil</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    [user_details, details_key]</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  # Support legacy foo.erb names even though we now ignore .erb</span>
</span><span class='line'><span class="sr">  # as well as incorrectly putting part of the path in the template</span>
</span><span class='line'><span class="sr">  # name instead of the prefix.</span>
</span><span class='line'><span class="sr">  def normalize_name(name, prefixes) #:nodoc:</span>
</span><span class='line'><span class="sr">    prefixes = prefixes.presence</span>
</span><span class='line'><span class="sr">    parts    = name.to_s.split(&#39;/</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">    parts.shift if parts.first.empty?</span>
</span><span class='line'><span class="s1">    name     = parts.pop</span>
</span><span class='line'>
</span><span class='line'><span class="s1">    return name, prefixes || [&quot;&quot;] if parts.empty?</span>
</span><span class='line'>
</span><span class='line'><span class="s1">    parts    = parts.join(&#39;</span><span class="o">/</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">prefixes</span> <span class="o">=</span> <span class="n">prefixes</span> <span class="p">?</span> <span class="n">prefixes</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">p</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">parts</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span> <span class="p">:</span> <span class="o">[</span><span class="n">parts</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">name</span><span class="p">,</span> <span class="n">prefixes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>find_template</strong> is implemented in module <strong>ActionView::LookupContext::ViewPaths</strong>, and <strong>ActionView::LookupContext</strong> includes this module. We can see that <strong>find_template</strong> is just an alias of method <strong>find</strong>. The <strong>find</strong> method delegats to <em>@view_paths</em>, which is an instance of <strong>ActionView::PathSet</strong>. So we need to understand what <strong>ActionView::PathSet#find</strong> is doing. Actually the <strong>ActionView::PathSet#find</strong> will delegate the <em>find</em> to a set of <strong>PathResolver</strong>, which we will check in next part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging Rails: How Rails finds your templates Part 2]]></title>
    <link href="http://climber2002.github.io/blog/2015/02/22/digging-rails-how-rails-finds-your-templates-part-2/"/>
    <updated>2015-02-22T21:24:30+10:30</updated>
    <id>http://climber2002.github.io/blog/2015/02/22/digging-rails-how-rails-finds-your-templates-part-2</id>
    <content type="html"><![CDATA[<p>In <a href="http://climber2002.github.io/blog/2015/02/21/how-rails-finds-your-templates-part-1/">last part</a> we introduced that when Rails looks for a template, it firstly populate an options hash by calling <strong>_normalize_render</strong>. And then in the <em>render</em> method, it will call <strong>render_to_body</strong> and pass the options, like the following code,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/abstract_controller/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module AbstractController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Normalize arguments, options and then delegates render_to_body and</span>
</span><span class='line'><span class="sr"># sticks the result in self.response_body.</span>
</span><span class='line'><span class="sr"># :api: public</span>
</span><span class='line'><span class="sr">def render(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  options = _normalize_render(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  self.response_body = render_to_body(options)</span>
</span><span class='line'><span class="sr">  _process_format(rendered_format, options) if rendered_format</span>
</span><span class='line'><span class="sr">  self.response_body</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>render_to_body</strong> will select the templated based on the values in options hash. If we check the source code of <strong>AbstractController::Rendering#render_to_body</strong>, it&rsquo;s nothing. Just as usual, it&rsquo;s overridden by other modules.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/abstract_controller/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module AbstractController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Performs the actual template rendering.</span>
</span><span class='line'><span class="sr"># :api: public</span>
</span><span class='line'><span class="sr">def render_to_body(options = {})</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just as last part, we could run <em>ApplicationController.ancestors_that_implement_instance_method</em> to find what classes or modules implement that method, and we will find the following,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;2.0.0-p353 :008 &gt; ApplicationController.ancestors_that_implement_instance_method(:render_to_body)</span>
</span><span class='line'><span class="sr"> =&gt; [ActionController::Renderers, ActionController::Rendering, ActionView::Rendering, AbstractController::Rendering]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see three modules implement that method: <em>ActionController::Renderers</em>, <em>ActionController::Rendering</em>, and <em>ActionView::Rendering</em>. Let&rsquo;s look at each of them one by one.</p>

<h2>ActionController::Renderers#render_to_body</h2>

<p>For <em>ActionController::Renderers#render_to_body</em> method, it registers a set of renderers, and then if the options contains the renderer key, then it will call that renderer. If no renderer is found, it just call <em>super</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/action_controller/metal/renderers.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Renderers</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def render_to_body(options)</span>
</span><span class='line'><span class="sr">  _render_to_body_with_renderer(options) || super</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def _render_to_body_with_renderer(options)</span>
</span><span class='line'><span class="sr">  _renderers.each do |name|</span>
</span><span class='line'><span class="sr">    if options.key?(name)</span>
</span><span class='line'><span class="sr">      _process_options(options)</span>
</span><span class='line'><span class="sr">      method_name = Renderers._render_with_renderer_method_name(name)</span>
</span><span class='line'><span class="sr">      return send(method_name, options.delete(name), options)</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  nil</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is mainly for calling <strong>render</strong> and pass parameters like :json, :xml, like the following code,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ArticlesController &amp;lt; ApplicationController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@articles = Articles.all</span>
</span><span class='line'><span class="sr">render json: @articles</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since <em>:json</em> is a registered renderer in <em>ActionController::Renderers</em>, it will call that renderer. You can also register your own renderer by calling <strong>ActionController::Renderers.add</strong>.</p>

<h2>ActionController::Rendering#render_to_body</h2>

<p>If in <strong>ActionController::Renderers#render_to_body</strong>, it doesn&rsquo;t find a renderer, then it will call <em>super</em>, which is <strong>ActionController::Rendering#render_to_body</strong>. Let&rsquo;s look at what this module does in the method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/action_controller/metal/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;RENDER_FORMATS_IN_PRIORITY = [:body, :text, :plain, :html]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def render_to_body(options = {})</span>
</span><span class='line'><span class="sr">  super || _render_in_priorities(options) || &#39; &#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def _render_in_priorities(options)</span>
</span><span class='line'><span class="sr">  RENDER_FORMATS_IN_PRIORITY.each do |format|</span>
</span><span class='line'><span class="sr">    return options[format] if options.key?(format)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  nil</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that this method calls <em>super</em> first, it only call <em>_render_in_priorities</em> if <em>super</em> returns nothing.</p>

<p>In <strong>_render_in_priorities</strong> it searches the RENDER_FORMATS_IN_PRIORITY one by one, and return the option value if it finds the format.</p>

<p>In this module when it calls <em>super</em>, it is calling <strong>ActionView::Rendering#render_to_body</strong> method. Let&rsquo;s have a look.</p>

<h2>ActionView::Rendering#render_to_body</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def render_to_body(options = {})</span>
</span><span class='line'><span class="sr">  _process_options(options)</span>
</span><span class='line'><span class="sr">  _render_template(options)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Returns an object that is able to render templates.</span>
</span><span class='line'><span class="sr"># :api: private</span>
</span><span class='line'><span class="sr">def view_renderer</span>
</span><span class='line'><span class="sr">  @_view_renderer ||= ActionView::Renderer.new(lookup_context)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  # Find and render a template based on the options given.</span>
</span><span class='line'><span class="sr">  # :api: private</span>
</span><span class='line'><span class="sr">  def _render_template(options) #:nodoc:</span>
</span><span class='line'><span class="sr">    variant = options[:variant]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    lookup_context.rendered_format = nil if options[:formats]</span>
</span><span class='line'><span class="sr">    lookup_context.variants = variant if variant</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    view_renderer.render(view_context, options)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It turns out that here is the the meat we are looking for. The <strong>render_to_body</strong> calls <strong>_render_template</strong>, and for the <strong>_render_template</strong>, it calls <strong>view_renderer.render(view_context, options)</strong>.</p>

<p>The <em>view_renderer</em> is an instance of <strong>ActionView::Renderer</strong>, and when it&rsquo;s initialized, it&rsquo;s passing a <em>lookup_context</em> object, which is an instance of <strong>ActionView::LookupContext</strong>. The <strong>ActionView::LookupContext</strong> contains all information about looking for a template based on the options. So in next part we will check this class in detail, and check how <strong>LookupContext</strong>, <strong>ViewPaths</strong>, <strong>PathSet</strong> work together to find the template.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging Rails: How Rails finds your templates Part 1]]></title>
    <link href="http://climber2002.github.io/blog/2015/02/21/how-rails-finds-your-templates-part-1/"/>
    <updated>2015-02-21T20:35:52+10:30</updated>
    <id>http://climber2002.github.io/blog/2015/02/21/how-rails-finds-your-templates-part-1</id>
    <content type="html"><![CDATA[<p>Have you ever wondered for a Rails application, when you access an action in a controller, how Rails finds the template to render? For example, when the action <em>index</em> in <em>ArticlesController</em> is accessed, by default the template <em>app/views/articles/index.html.erb</em> will be selected and rendered. Recently I&rsquo;m digging the source code of Rails, and I invite you to walk through some source code in ActionPack and ActionView with me. And then I will show how the Rubygem <a href="https://github.com/bwillis/versioncake">versioncake</a> works by modifying the Rails configuration.</p>

<p>In this first part we firstly check how the <strong>render</strong> works. Notice that we check Rails 4.2 source code. If you look at another version, the implementation may be slightly different.</p>

<p>The entry point for the render is from the <strong>AbstractController::Rendering#render</strong> method. The <strong>AbstractController</strong> is a module shared by ActionController and ActionMailer. Since these two modules share a lot of functionalities, Rails extract those same functionalities into <strong>AbstractController</strong>. Let&rsquo;s have a look at this method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/abstract_controller/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module AbstractController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Normalize arguments, options and then delegates render_to_body and</span>
</span><span class='line'><span class="sr"># sticks the result in self.response_body.</span>
</span><span class='line'><span class="sr"># :api: public</span>
</span><span class='line'><span class="sr">def render(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  options = _normalize_render(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  self.response_body = render_to_body(options)</span>
</span><span class='line'><span class="sr">  _process_format(rendered_format, options) if rendered_format</span>
</span><span class='line'><span class="sr">  self.response_body</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In our controller, we could call <em>render</em> method directly. For example, we can call <em>render &lsquo;new&rsquo;</em> to render the <em>new.html.erb</em> template. Or if we don&rsquo;t call <em>render</em> explicitly, there is a module <strong>ActionController::ImplicitRender</strong> which will call a default render.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/action_controller/metal/implicit_renderer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionController</span>
</span><span class='line'><span class="sr">  module ImplicitRender&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">send_action</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>  <span class="n">default_render</span> <span class="k">unless</span> <span class="n">performed?</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">default_render</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">render</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The send_action will be called when the action of a controller is triggered. It first calls super, then if in the action it doesn&rsquo;t render anything, the <em>performed?</em> will return false. So <em>default_render</em> is called. We can see that when call <em>default_render</em> it just calls <em>render</em> without any arguments.</p>

<p>In <strong>AbstractController::Rendering#render</strong> method, it firstly calls <em>_normalize_render</em> then calls <em>render_to_body</em>. The <em>_normalize_render</em> returns an options object which is a Hash. In this part we will examine the <strong>_normalize_render</strong> method to see how the options is generated.</p>

<p>Let&rsquo;s see how <strong>_normalize_render</strong> is implemented.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/abstract_controller/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module AbstractController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;private</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Normalize args and options.</span>
</span><span class='line'><span class="sr"># :api: private</span>
</span><span class='line'><span class="sr">def _normalize_render(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  options = _normalize_args(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  #TODO: remove defined? when we restore AP &amp;lt;=&amp;gt; AV dependency</span>
</span><span class='line'><span class="sr">  if defined?(request) &amp;amp;&amp;amp; request &amp;amp;&amp;amp; request.variant.present?</span>
</span><span class='line'><span class="sr">    options[:variant] = request.variant</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  _normalize_options(options)</span>
</span><span class='line'><span class="sr">  options</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We see that it calls <em>_normalize_args</em> and <em>_normalize_options</em> methods. The <em>_normalize_args</em> and <em>_normalize_options</em> have different purposes.</p>

<h3>_normalize_args</h3>

<p>The <strong>_normalize_args</strong> is to convert all args into an options hash. For example when we call <em>render</em> method, we could call like this,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="kp">new</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:ok</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here the first argument &lsquo;new&rsquo; is a String, and <strong>_normalize_args</strong> is responsible to put this first argument in options hash and give it an appropriate key.</p>

<p>Let&rsquo;s see how it&rsquo;s implemented.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/abstract_controller/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module AbstractController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Normalize args by converting render &quot;foo&quot; to render :action =&amp;gt; &quot;foo&quot; and</span>
</span><span class='line'><span class="sr"># render &quot;foo/</span><span class="n">bar</span><span class="s2">&quot; to render :file =&amp;gt; &quot;</span><span class="n">foo</span><span class="o">/</span><span class="n">bar</span><span class="s2">&quot;.</span>
</span><span class='line'><span class="s2"># :api: plugin</span>
</span><span class='line'><span class="s2">def _normalize_args(action=nil, options={})</span>
</span><span class='line'><span class="s2">  if action.is_a? Hash</span>
</span><span class='line'><span class="s2">    action</span>
</span><span class='line'><span class="s2">  else</span>
</span><span class='line'><span class="s2">    options</span>
</span><span class='line'><span class="s2">  end</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We see that this method by default almost does nothing, if the action is a Hash, it returns action, otherwise if action is for example, a string, it returns the second parameter which is the options hash.</p>

<p>Notice that ApplicationController includes some other modules which override this method, as we will see later.</p>

<h3>_normalize_options</h3>

<p>The <strong>_normalize_options</strong> method is for the modules to include other options. For a Rails application, the ApplicationController extends from <strong>ActionController::Base</strong>, and <strong>ActionController::Base</strong> includes a lot of modules, each module could override this method and add some other options.</p>

<p>Let&rsquo;s firstly check how this method is implemented in <strong>AbstractController::Rendering</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/abstract_controller/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module AbstractController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Normalize options.</span>
</span><span class='line'><span class="sr"># :api: plugin</span>
</span><span class='line'><span class="sr">def _normalize_options(options)</span>
</span><span class='line'><span class="sr">  options</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By default this method does nothing. But it will be overridden in other modules.</p>

<h3>Override _normalize_args</h3>

<p>Rails source code is complex, one reason is because there are many modules could override other modules&rsquo;s methods. For example, in a ArticlesController, let&rsquo;s see its ancestors,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;$ rails c</span>
</span><span class='line'><span class="sr">Loading development environment (Rails 4.2.0)</span>
</span><span class='line'><span class="sr">2.0.0-p353 :001 &gt; puts ArticlesController.ancestors</span>
</span><span class='line'><span class="sr">ArticlesController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="ss">Module</span><span class="p">:</span><span class="mh">0x007f8f0a971800</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ApplicationController&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="ss">Module</span><span class="p">:</span><span class="mh">0x007f8f0a8f93c8</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;&amp;lt;Module:0x007f8f05465118&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="ss">Module</span><span class="p">:</span><span class="mh">0x007f8f05465140</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ActionController::Base</span>
</span><span class='line'><span class="sr">WebConsole::ControllerHelpers</span>
</span><span class='line'><span class="sr">Turbolinks::XHRHeaders</span>
</span><span class='line'><span class="sr">Turbolinks::Cookies</span>
</span><span class='line'><span class="sr">Turbolinks::XDomainBlocker</span>
</span><span class='line'><span class="sr">Turbolinks::Redirection</span>
</span><span class='line'><span class="sr">ActiveRecord::Railties::ControllerRuntime</span>
</span><span class='line'><span class="sr">ActionDispatch::Routing::RouteSet::MountedHelpers</span>
</span><span class='line'><span class="sr">ActionController::ParamsWrapper</span>
</span><span class='line'><span class="sr">ActionController::Instrumentation</span>
</span><span class='line'><span class="sr">ActionController::Rescue</span>
</span><span class='line'><span class="sr">ActionController::HttpAuthentication::Token::ControllerMethods</span>
</span><span class='line'><span class="sr">ActionController::HttpAuthentication::Digest::ControllerMethods</span>
</span><span class='line'><span class="sr">ActionController::HttpAuthentication::Basic::ControllerMethods</span>
</span><span class='line'><span class="sr">ActionController::DataStreaming</span>
</span><span class='line'><span class="sr">ActionController::Streaming</span>
</span><span class='line'><span class="sr">ActionController::ForceSSL</span>
</span><span class='line'><span class="sr">ActionController::RequestForgeryProtection</span>
</span><span class='line'><span class="sr">ActionController::Flash</span>
</span><span class='line'><span class="sr">ActionController::Cookies</span>
</span><span class='line'><span class="sr">ActionController::StrongParameters</span>
</span><span class='line'><span class="sr">ActiveSupport::Rescuable</span>
</span><span class='line'><span class="sr">ActionController::ImplicitRender</span>
</span><span class='line'><span class="sr">ActionController::MimeResponds</span>
</span><span class='line'><span class="sr">ActionController::Caching</span>
</span><span class='line'><span class="sr">ActionController::Caching::Fragments</span>
</span><span class='line'><span class="sr">ActionController::Caching::ConfigMethods</span>
</span><span class='line'><span class="sr">AbstractController::Callbacks</span>
</span><span class='line'><span class="sr">ActiveSupport::Callbacks</span>
</span><span class='line'><span class="sr">ActionController::EtagWithTemplateDigest</span>
</span><span class='line'><span class="sr">ActionController::ConditionalGet</span>
</span><span class='line'><span class="sr">ActionController::Head</span>
</span><span class='line'><span class="sr">ActionController::Renderers::All</span>
</span><span class='line'><span class="sr">ActionController::Renderers</span>
</span><span class='line'><span class="sr">ActionController::Rendering</span>
</span><span class='line'><span class="sr">ActionView::Layouts</span>
</span><span class='line'><span class="sr">ActionView::Rendering</span>
</span><span class='line'><span class="sr">ActionController::Redirecting</span>
</span><span class='line'><span class="sr">ActionController::RackDelegation</span>
</span><span class='line'><span class="sr">ActiveSupport::Benchmarkable</span>
</span><span class='line'><span class="sr">AbstractController::Logger</span>
</span><span class='line'><span class="sr">ActionController::UrlFor</span>
</span><span class='line'><span class="sr">AbstractController::UrlFor</span>
</span><span class='line'><span class="sr">ActionDispatch::Routing::UrlFor</span>
</span><span class='line'><span class="sr">ActionDispatch::Routing::PolymorphicRoutes</span>
</span><span class='line'><span class="sr">ActionController::ModelNaming</span>
</span><span class='line'><span class="sr">ActionController::HideActions</span>
</span><span class='line'><span class="sr">ActionController::Helpers</span>
</span><span class='line'><span class="sr">AbstractController::Helpers</span>
</span><span class='line'><span class="sr">AbstractController::AssetPaths</span>
</span><span class='line'><span class="sr">AbstractController::Translation</span>
</span><span class='line'><span class="sr">AbstractController::Rendering</span>
</span><span class='line'><span class="sr">ActionView::ViewPaths</span>
</span><span class='line'><span class="sr">ActionController::Metal</span>
</span><span class='line'><span class="sr">AbstractController::Base</span>
</span><span class='line'><span class="sr">ActiveSupport::Configurable</span>
</span><span class='line'><span class="sr">Object</span>
</span><span class='line'><span class="sr">ActiveSupport::Dependencies::Loadable</span>
</span><span class='line'><span class="sr">PP::ObjectMixin</span>
</span><span class='line'><span class="sr">JSON::Ext::Generator::GeneratorMethods::Object</span>
</span><span class='line'><span class="sr">Kernel</span>
</span><span class='line'><span class="sr">BasicObject&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that for a typical controller, it has a lot of ancestors and most of them are modules. All modules after <em>AbstractController::Rendering</em> could override its methods. I have created a gist to check which ancestors implement a method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Module</span>
</span><span class='line'><span class="sr">  def ancestors_that_implement_instance_method(instance_method)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">ancestors</span><span class="o">.</span><span class="n">find_all</span> <span class="k">do</span> <span class="o">|</span><span class="n">ancestor</span><span class="o">|</span>
</span><span class='line'>  <span class="p">(</span><span class="n">ancestor</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span> <span class="o">+</span> <span class="n">ancestor</span><span class="o">.</span><span class="n">private_instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">))</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">instance_method</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Run the above code in a rails console, then you can call <em>ClassName.ancestors_that_implement_instance_method</em> to check what ancestors implement a method.</p>

<p>Let&rsquo;s first see what ancestors override the <em>_normalize_args</em> method,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;$ rails c</span>
</span><span class='line'><span class="sr">Loading development environment (Rails 4.2.0)</span>
</span><span class='line'><span class="sr">2.0.0-p353 :013 &gt;   ArticlesController.ancestors_that_implement_instance_method(:_normalize_args)</span>
</span><span class='line'><span class="sr"> =&gt; [ActionController::Rendering, ActionView::Rendering, AbstractController::Rendering]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Two modules override this instance method: <em>ActionView::Rendering</em> and <em>ActionController::Rendering</em>. Let&rsquo;s look them in order from top to down.</p>

<p>Let&rsquo;s look at <em>ActionView::Rendering</em> first,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>actionview/lib/action_view/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView</span>
</span><span class='line'><span class="sr">  module Rendering&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Normalize args by converting render &quot;foo&quot; to render :action =&amp;gt; &quot;foo&quot; and</span>
</span><span class='line'><span class="c1"># render &quot;foo/bar&quot; to render :template =&amp;gt; &quot;foo/bar&quot;.</span>
</span><span class='line'><span class="c1"># :api: private</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_normalize_args</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="k">super</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">action</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">NilClass</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Hash</span>
</span><span class='line'>    <span class="n">options</span> <span class="o">=</span> <span class="n">action</span>
</span><span class='line'>  <span class="k">when</span> <span class="nb">String</span><span class="p">,</span> <span class="no">Symbol</span>
</span><span class='line'>    <span class="n">action</span> <span class="o">=</span> <span class="n">action</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">action</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="sc">?/</span><span class="p">)</span> <span class="p">?</span> <span class="ss">:template</span> <span class="p">:</span> <span class="ss">:action</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">action</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:partial</span><span class="o">]</span> <span class="o">=</span> <span class="n">action</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">options</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that for the first argument <em>action</em>, if it&rsquo;s a string and the string include &lsquo;/&rsquo;, the key for this argument is :file, and if it doesn&rsquo;t include &lsquo;/&rsquo;, the key is :action.</p>

<p>So if we call <em>render &lsquo;new&rsquo;</em>, the options will be { action: &lsquo;new&rsquo; }, if we call <em>render &lsquo;articles/new&rsquo;</em>, the options will be { file: &lsquo;articles/new&rsquo; }</p>

<p>Now let&rsquo;s see how <em>ActionController::Rendering</em> overrides this method</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>actionpack/lib/action_controller/metal/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionController</span>
</span><span class='line'><span class="sr">  module Rendering&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Normalize arguments by catching blocks and setting them on :update.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_normalize_args</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">blk</span><span class="p">)</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:update</span><span class="o">]</span> <span class="o">=</span> <span class="n">blk</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="n">options</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that for this override, if the method is passed a block, it will set the block to options[:update]</p>

<h3>Override _normalize_options</h3>

<p>Just like <em>_normalize_args</em>, let&rsquo;s examine what modules override <em>_normalize_options</em>. We can see following modules implement <em>_normalize_options</em>: <em>[ActionController::Rendering, ActionView::Layouts, ActionView::Rendering, AbstractController::Rendering]</em>.</p>

<p>Let&rsquo;s check <em>ActionView::Rendering</em> first,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>actionpack/lib/action_controller/metal/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView</span>
</span><span class='line'><span class="sr">  module Rendering&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Normalize options.</span>
</span><span class='line'><span class="c1"># :api: private</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_normalize_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="k">super</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:partial</span><span class="o">]</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:partial</span><span class="o">]</span> <span class="o">=</span> <span class="n">action_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">keys</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">[</span><span class="ss">:partial</span><span class="p">,</span> <span class="ss">:file</span><span class="p">,</span> <span class="ss">:template</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:prefixes</span><span class="o">]</span> <span class="o">||=</span> <span class="n">_prefixes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:template</span><span class="o">]</span> <span class="o">||=</span> <span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:action</span><span class="o">]</span> <span class="o">||</span> <span class="n">action_name</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="n">options</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that it addes three options by default,</p>

<ul>
<li>If the options[:partial] is true, then it will set options[:partial] to <em>action_name</em>, the <em>action_name</em> is just the name of the action that is triggered. For example, if the <em>index</em> action of ArticlesController is triggered, <em>action_name</em> will be <em>index</em>.</li>
<li>If the options doesn&rsquo;t include :partial, :file or :template, it set options[:prefixes]. Let&rsquo;s see what&rsquo;s set for this :prefixes in a minute.</li>
<li>It set the options[:template]. It&rsquo;s either passed from the arguments or just use the action_name.</li>
</ul>


<p>So what&rsquo;s in options[:prefixes], let&rsquo;s see how <em>_prefixes</em> method is implemented.</p>

<p>The <strong>AbstractController::Rendering</strong> module includes <strong>ActionView::ViewPaths</strong> module. And <strong>_prefixes</strong> method is implemented there.</p>

<p><strong>ActionView::ViewPaths</strong> is an important module which we will examine in more details in later parts. It&rsquo;s to manage the view paths for controllers. For example, by default Rails will append a view path <strong>#{Rails.root}app/views</strong> so the application knows to search templates in that specific view path.</p>

<p>For now let&rsquo;s just focus on <strong>_prefixes</strong> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/view_paths.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">ViewPaths</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# The prefixes used in render &quot;foo&quot; shortcuts.</span>
</span><span class='line'><span class="sr">def _prefixes # :nodoc:</span>
</span><span class='line'><span class="sr">  self.class._prefixes</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>_prefixes</strong> just calls the class method <strong>_prefixes</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/view_paths.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">ViewPaths</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;module ClassMethods</span>
</span><span class='line'><span class="sr">  def _prefixes # :nodoc:</span>
</span><span class='line'><span class="sr">    @_prefixes ||= begin</span>
</span><span class='line'><span class="sr">      return local_prefixes if superclass.abstract?</span>
</span><span class='line'>
</span><span class='line'><span class="sr">      local_prefixes + superclass._prefixes</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  private</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  # Override this method in your controller if you want to change paths prefixes for finding views.</span>
</span><span class='line'><span class="sr">  # Prefixes defined here will still be added to parents&#39; &amp;lt;tt&amp;gt;._prefixes&amp;lt;/</span><span class="n">tt</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_prefixes</span>
</span><span class='line'>    <span class="o">[</span><span class="n">controller_path</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that Rails 4.2 implements that method and handles some deprecated parent prefixes. In above code I omitted that handling for clarity.</p>

<p>This <strong>ActionView::ViewPaths._prefixes</strong> calls recursively. it append local_prefixes with superclass&rsquo;s _prefixes. The <strong>local_prefixes</strong> has just one element: <strong>controller_path</strong>.</p>

<p>The <strong>controller_path</strong> method is very simple, it&rsquo;s implemented in <strong>AbstractController::Base</strong>. For example, for a controller <em>ArticlesController</em>, its controller_path will be <em>articles</em>, and for a controller <em>Articles::CommentsController</em>, its controller_path will be <em>articles/comments</em></p>

<p>So the <strong>_prefixes</strong> method first gets it&rsquo;s parent prefixes, and then prepends the current controller_path to the front.</p>

<p>For example, if our application has a <em>ArticlesController</em>, in our rails controller, we can call the following code to show the <em>_prefixes</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;$ rails c</span>
</span><span class='line'><span class="sr">Loading development environment (Rails 4.2.0)</span>
</span><span class='line'><span class="sr">2.0.0-p353 :001 &gt; ArticlesController.new.send(:_prefixes)</span>
</span><span class='line'><span class="sr"> =&gt; [&amp;ldquo;articles&amp;rdquo;, &amp;ldquo;application&amp;rdquo;]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We see that the prefixes contains two elements: articles and application. It&rsquo;s because the ApplicationController extends from ActionController::Base, but ActionController::Base is abstract.</p>

<p>So now we can see that for <em>ArticlesController#index</em> action, when we just call <em>render</em> without any arguments, the options will contains following elements,</p>

<ul>
<li><strong>:prefixes</strong> : array [&ldquo;articles&rdquo;, &ldquo;application&rdquo;]</li>
<li><strong>:template</strong> : string &ldquo;index&rdquo;</li>
</ul>


<p>Now let&rsquo;s see next one, how <strong>ActionView::Layouts</strong> overrides <strong>_normalize_options</strong> method,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionview/lib/action_view/layouts.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ActionView</span>
</span><span class='line'><span class="sr">  module Layouts&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">_normalize_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>  <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">_include_layout?</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">layout</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:layout</span><span class="p">)</span> <span class="p">{</span> <span class="ss">:default</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:layout</span><span class="o">]</span> <span class="o">=</span> <span class="n">_layout_for_option</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can see that if the options[:layout] is not set, the default layout is :default. And then options[:layout] is set to the result returned by <em>_layout_for_option</em>.</p>

<p>If you are interested you could check how <strong>_layout_for_options</strong> is implemented. When this module searches for the layout it will search <em>&ldquo;app/views/layouts/#{class_name.underscore}.rb&rdquo;</em> first, if it doesn&rsquo;t found, then it will search super class. Since when a rails application is generated, an application.html.erb will be put in <em>app/views/layouts</em> and since by default all controllers' parent is ApplicationController, so by default this layout will be used.</p>

<p>Finally let&rsquo;s see how <strong>ActionController::Rendering</strong> overrides <strong>_normalize_options</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rails/actionpack/lib/action_controller/metal/rendering.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActionController</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Rendering</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Normalize both text and status options.</span>
</span><span class='line'><span class="sr">def _normalize_options(options) #:nodoc:</span>
</span><span class='line'><span class="sr">  _normalize_text(options)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  if options[:html]</span>
</span><span class='line'><span class="sr">    options[:html] = ERB::Util.html_escape(options[:html])</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  if options.delete(:nothing)</span>
</span><span class='line'><span class="sr">    options[:body] = nil</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  if options[:status]</span>
</span><span class='line'><span class="sr">    options[:status] = Rack::Utils.status_code(options[:status])</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  super</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So this method just process :html, :nothing and :status options, which is straight forward.</p>

<p>So finally let&rsquo;s see when we call <em>render</em> in <em>ArticlesController#index</em> without any arguments, the options will contains following values,</p>

<ul>
<li><strong>:prefixes</strong> : array [&ldquo;articles&rdquo;, &ldquo;application&rdquo;]</li>
<li><strong>:template</strong> : string &ldquo;index&rdquo;</li>
<li><strong>:layout</strong>   : A Proc when called will return &ldquo;app/views/layouts/application.html.erb&rdquo;</li>
</ul>


<p>Now we know how the options is normalized. And when Rails determines which template to render, it will extract details from the options. And we will look at how Rails determines template in later parts.</p>
]]></content>
  </entry>
  
</feed>
