<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devise | AprilTouch]]></title>
  <link href="http://climber2002.github.io/blog/categories/devise/atom.xml" rel="self"/>
  <link href="http://climber2002.github.io/"/>
  <updated>2015-03-29T22:37:43+10:30</updated>
  <id>http://climber2002.github.io/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customize Devise to support Multitenancy authentication]]></title>
    <link href="http://climber2002.github.io/blog/2015/03/29/customize-devise-to-support-subdomain-authentication/"/>
    <updated>2015-03-29T21:13:21+10:30</updated>
    <id>http://climber2002.github.io/blog/2015/03/29/customize-devise-to-support-subdomain-authentication</id>
    <content type="html"><![CDATA[<p>Last year I read the book <a href="https://leanpub.com/multi-tenancy-rails">Multitenancy with Rails</a> written by Ryan Bigg. In the book when he implements the authentication for the multi-tenancy, he uses <a href="https://github.com/hassox/warden">Warden</a> instead of Devise, cause using Devise will need a lot of customization. And Recently I need to implement this multi-tenancy authentication for a Rails application, and I want to use Devise, so I checked the source code of Warden and Devise and found a way to customize Devise to do it.</p>

<p>In my application, I have two models, <strong>Merchant</strong> and <strong>User</strong>, one user can be the owner of one or more merchant, so they are a has_and_belongs_to_many relationship.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Merchant &amp;lt; ActiveRecord::Base&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">EXCLUDED_SUBDOMAINS</span> <span class="o">=</span> <span class="sx">%w(admin www administrator admins owner)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  validates_exclusion_of :subdomain, in: EXCLUDED_SUBDOMAINS,&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;is not allowed. Please choose another subdomain&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">validates_format_of</span> <span class="ss">:subdomain</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="sr">/\A[\w-]+\Z/i</span><span class="p">,</span> <span class="n">allow_blank</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;message: &quot;is not allowed. Please choose another subdomain.&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  validates :subdomain, presence: true, uniqueness: true&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">mount_uploader</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="no">AvatarUploader</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  before_validation do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">self</span><span class="o">.</span><span class="n">subdomain</span> <span class="o">=</span> <span class="n">subdomain</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_and_belongs_to_many :owners, class_name: &amp;lsquo;User&amp;rsquo;, join_table: &amp;lsquo;merchants_owners&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">owner?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;return false unless user.present?</span>
</span><span class='line'><span class="sr">!!owners.find_by(id: user.id)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class User &amp;lt; ActiveRecord::Base&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Each merchant can access its web interface through a subdomain URL. In model <strong>Merchant</strong> there is a unique attribute <strong>subdomain</strong>, this will be used for subdomain. For example, one merchant&rsquo;s subdomain is <em>skywatch</em>, then the URL for this merchant is <a href="http://skywatch.xhop.pe">http://skywatch.xhop.pe</a> . And for the authentication, a user can login this URL only if he is this merchant&rsquo;s owner.</p>

<p>And in <strong>Merchant</strong> class we defined an instance method <strong>owner?</strong> of check if a user is owner of a merchant.</p>

<h2>Subdomain Routes Configuration</h2>

<p>For all controllers related to a merchant, I put the controllers under a module <strong>Merchant</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">constraints</span><span class="p">(</span><span class="ss">Constraints</span><span class="p">:</span><span class="ss">:SubdomainRequired</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">merchant</span><span class="o">/</span><span class="n">dashboard</span><span class="c1">#index&amp;rsquo;, as: :merchant_root&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">namespace</span> <span class="ss">:merchant</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;resources &#39;products&#39;</span>
</span><span class='line'><span class="sr"># and other resources</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We set a constraint <strong>Constraints::SubdomainRequired</strong> to match merchant&rsquo;s routes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/constraints/subdomain_required.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Constraints</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SubdomainRequired</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def self.matches?(request)</span>
</span><span class='line'><span class="sr">  request.subdomain.present? &amp;amp;&amp;amp; request.subdomain != &quot;www&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So only when the request has a subdomain and the subdomain is not <em>www</em>, then it will match merchants' routes.</p>

<h2>Warden and Devise</h2>

<p>Warden is a <a href="http://rack.github.io/">Rack</a> middleware which provides authentication for web applications. You can register <em>Strategies</em> in Warden to define how to authenticate a user.</p>

<p>For example, the following is to add a <strong>:password</strong> strategy in Warden</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Warden</span><span class="p">:</span><span class="ss">:Strategies</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def valid?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">params</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;password&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def authenticate!&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;password&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="nb">fail</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;Could not log in&quot;</span><span class="p">)</span> <span class="p">:</span> <span class="n">success!</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When register a strategy, you should provide a name(<strong>:password</strong> as above), and an object or block, the object should implement two methods,</p>

<ul>
<li><p><strong>valid?</strong>: It’s optional to declare a valid? method, and if you don’t declare it, the strategy will always be run. If you do declare it though, the strategy will only be tried if #valid? evaluates to true. This could be used to check if all necessary parameters are valid in the request</p></li>
<li><p><strong>authenticate!</strong>: This is where the work of actually authenticating the request steps in. Here’s where the logic for authenticating your requests occurs.</p></li>
</ul>


<p>You have a number of request related methods available.</p>

<ul>
<li>request # Rack::Request object</li>
<li>session # The session object for the request</li>
<li>params # The parameters of the request</li>
<li>env # The Rack env object</li>
</ul>


<p>There are also a number of actions you can take in your strategy.</p>

<ul>
<li>halt! # halts cascading of strategies. Makes this one the last one processed</li>
<li>pass # ignore this strategy. It is not required to call this and this is only sugar</li>
<li>success! # Supply success! with a user object to log in a user. Causes a halt!</li>
<li>fail! # Sets the strategy to fail. Causes a halt!</li>
<li>redirect! # redirect to another url. You can supply it with params to be encoded and also options. Causes a halt!</li>
<li>custom! # return a custom rack array to be handed back untouched. Causes a halt!
There’s a couple of misc things to do too:</li>
</ul>


<p>headers # set headers to respond with relevant to the strategy
errors # provides access to an errors object. Here you can put in errors relating to authentication</p>

<p>For more information check <a href="https://github.com/hassox/warden/wiki/Strategies">the Warden documents</a>.</p>

<p>Devise depends on Warden, and it registers a Strategy <strong>database_authenticatable</strong> by default,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>devise/lib/devise/strategies/database_authenticatable.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module Devise</span>
</span><span class='line'><span class="sr">  module Strategies&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Default strategy for signing in a user, based on their email and password in the database.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DatabaseAuthenticatable</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Authenticatable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate!</span>
</span><span class='line'>    <span class="n">resource</span>  <span class="o">=</span> <span class="n">valid_password?</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mapping</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">find_for_database_authentication</span><span class="p">(</span><span class="n">authentication_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="n">encrypted</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">validate</span><span class="p">(</span><span class="n">resource</span><span class="p">){</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span> <span class="n">resource</span><span class="o">.</span><span class="n">valid_password?</span><span class="p">(</span><span class="n">password</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">resource</span><span class="o">.</span><span class="n">after_database_authentication</span>
</span><span class='line'>      <span class="n">success!</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mapping</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">password</span> <span class="k">if</span> <span class="o">!</span><span class="n">encrypted</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Devise</span><span class="o">.</span><span class="n">paranoid</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span><span class="ss">:not_found_in_database</span><span class="p">)</span> <span class="k">unless</span> <span class="n">resource</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Warden::Strategies.add(:database_authenticatable,</span>
</span><span class='line'><span class="sr">Devise::Strategies::DatabaseAuthenticatable)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>Devise::Strategies::DatabaseAuthenticatable</strong> extends from <strong>Devise::Strategies::Authentiatable</strong>, which provides some methods for common authenticate behavior. If you are interested you could check Devise&rsquo;s source code. In above code, we can see that firstly it finds the <em>resource</em> from authentication_hash, for our case, the <em>resource</em> will be a <strong>User</strong> instance, and then if validate resource&rsquo;s password successfully, it calls <em>success!</em>, otherwise it calls <em>fail</em>.</p>

<h2>Customize Devise Strategy</h2>

<p>So for our case, we should not only check if the user&rsquo;s username and password are valid, but also we must check if the user is an owner of the merchant.</p>

<p>Let&rsquo;s create class called <strong>Devise::Strategies::DatabaseAuthenticatableForMerchantOwner</strong>, we put this class in <strong>lib</strong> folder,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/devise/strategies/database_authenticatable_for_merchant_owner.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module Devise</span>
</span><span class='line'><span class="sr">  module Strategies&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">DatabaseAuthenticatableForMerchantOwner</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Authenticatable</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># This code is mostly copied from Devise, but except the authentication of devise</span>
</span><span class='line'>  <span class="c1"># the class includes this module should define a method &#39;custom_validate(resource)&#39; to</span>
</span><span class='line'>  <span class="c1"># provide other validates, for example if the resource is admin, or if th resource is </span>
</span><span class='line'>  <span class="c1"># an owner of a merchant etc..</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate!</span>
</span><span class='line'>    <span class="n">resource</span>  <span class="o">=</span> <span class="n">valid_password?</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mapping</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">find_for_database_authentication</span><span class="p">(</span><span class="n">authentication_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="n">encrypted</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">validate</span><span class="p">(</span><span class="n">resource</span><span class="p">){</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span> <span class="n">resource</span><span class="o">.</span><span class="n">valid_password?</span><span class="p">(</span><span class="n">password</span><span class="p">)</span> <span class="p">}</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">custom_validate</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resource</span><span class="o">.</span><span class="n">after_database_authentication</span>
</span><span class='line'>        <span class="n">success!</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">mapping</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">password</span> <span class="k">if</span> <span class="o">!</span><span class="n">encrypted</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Devise</span><span class="o">.</span><span class="n">paranoid</span>
</span><span class='line'>      <span class="nb">fail</span><span class="p">(</span><span class="ss">:not_found_in_database</span><span class="p">)</span>
</span><span class='line'>      <span class="n">halt!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">custom_validate</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="n">merchant</span> <span class="o">=</span> <span class="n">get_merchant</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">merchant</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="n">merchant</span><span class="o">.</span><span class="n">owner?</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_merchant</span>
</span><span class='line'>    <span class="no">Merchant</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">subdomain</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">subdomain</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <strong>authenticate!</strong> method is almost copied from <strong>Devise::Strategies::DatabaseAuthenticatable</strong>, however, after <em>validate(resource)</em> it also calls method <strong>custom_validate</strong>, and in <strong>custom_validate</strong> it will get the merchant from the request&rsquo;s subdomain and test if the resource(which is a user) is the merchant&rsquo;s owner.</p>

<p>PS: It&rsquo;s not a good practice to copy devise souce code here, I will update this blog if I find a better way.</p>

<h2>Register our new strategy</h2>

<p>Now we need to register this new strategy. After we installed the Devise gem, it will create a file <strong>config/initializers/devise.rb</strong>, so let&rsquo;s update this file,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/devise/strategies/database_authenticatable_for_merchant_owner.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">warden</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  require &amp;lsquo;devise/s</span><span class="n">trategies</span><span class="o">/</span><span class="n">database_authenticatable_for_merchant_owner</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="ss">Warden</span><span class="p">:</span><span class="ss">:Strategies</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:database_authenticatable_for_merchant_owner</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Devise::Strategies::DatabaseAuthenticatableForMerchantOwner)   </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  manager.default_strategies(:scope =&gt; :user).delete :database_authenticatable</span>
</span><span class='line'><span class="sr">  manager.default_strategies(:scope =&gt; :user).push :database_authenticatable_for_merchant_owner&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we need to require the file explicitly. And then we add the strategy :database_authenticatable_for_merchant_owner.</p>

<p>And in the routes.rb, when we call</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Devise will define a scope <strong>:user</strong> in Warden, and it will add the :database_authenticatable in the default_strategies list. Since we want to use :database_authenticatable_for_merchant_owner strategy, we delete :database_authenticatable and push :database_authenticatable_for_merchant_owner</p>

<p>After this, our application will use :database_authenticatable_for_merchant_owner and support Multitenancy authentication.</p>
]]></content>
  </entry>
  
</feed>
